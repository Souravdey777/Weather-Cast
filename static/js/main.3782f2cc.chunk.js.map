{"version":3,"sources":["components/currentweatherdetails/currentweatherdetails.module.css","containers/AppContainer/AppContainer.module.css","components/temperatureModal/temperatureModal.js","components/currentweatherdetails/currentweatherdetails.js","containers/AppContainer/AppContainer.js","App.js","serviceWorker.js","index.js","components/temperatureModal/temperatureModal.module.css"],"names":["module","exports","body","currentweatherdetails","lines","topic","text","AppContainer","TemperatureModal","tempModal","React","createRef","description","icon","handleScroll","window","scrollY","_this","current","style","width","height","opacity","removeEventListener","this","addEventListener","react_default","a","createElement","props","weatherData","ref","className","ClassNames","color","build_default","size","animate","weather","map","content","charAt","toUpperCase","slice","temp","main","toFixed","city","name","sys","country","Component","CurrentWeatherDetails","CurrentweatherData","humidity","pressure","temp_min","temp_max","wind","speed","state","latitude","longitude","API_KEY","base","clouds","cod","coord","dt","id","visibility","length","getlocation","navigator","geolocation","getCurrentPosition","position","console","log","coords","setState","getWeather","axios","get","concat","then","response","data","catch","error","temperatureModal","App","containers_AppContainer_AppContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3782f2cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"currentweatherdetails_body__3wfSf\",\"currentweatherdetails\":\"currentweatherdetails_currentweatherdetails__3fRHn\",\"lines\":\"currentweatherdetails_lines__1LY9S\",\"topic\":\"currentweatherdetails_topic__1x09H\",\"text\":\"currentweatherdetails_text__3bqSf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"AppContainer_AppContainer__2NJBC\"};","import React, { Component } from 'react';\r\nimport ClassNames from './temperatureModal.module.css';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\nlet lastScrollY = 0;\r\n\r\nclass TemperatureModal extends Component {\r\n\r\n\r\n    componentWillMount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    tempModal = React.createRef();\r\n    description = React.createRef();\r\n    icon = React.createRef();\r\n\r\n    handleScroll = () => {\r\n        lastScrollY = window.scrollY;\r\n\r\n        if (lastScrollY > 30) {\r\n            this.tempModal.current.style.width = \"100px\";\r\n            this.tempModal.current.style.height = \"100px\";\r\n            this.description.current.style.opacity = \"0\";\r\n            this.icon.current.style.opacity = \"0\";\r\n        }\r\n        else {\r\n            this.tempModal.current.style.width = \"250px\";\r\n            this.tempModal.current.style.height = \"250px\";\r\n            this.description.current.style.opacity = \"1\";\r\n            this.icon.current.style.opacity = \"1\";\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.props.weatherData ? (\r\n                    <div ref={this.tempModal} className={ClassNames.tempModal} style={{\r\n                        color: \"rgb(198, 102, 0)\"\r\n                    }}>\r\n                        <div ref={this.icon} className={ClassNames.description}>\r\n                            <ReactAnimatedWeather\r\n                                icon=\"CLOUDY\"\r\n                                color=\"rgb(198, 102, 0)\"\r\n                                size={64}\r\n                                animate={true}\r\n                            />\r\n                        </div>\r\n                        <div ref={this.description} className={ClassNames.description}>\r\n                            {this.props.weatherData.weather.map(content => {\r\n                                return (content.description.charAt(0).toUpperCase() + content.description.slice(1))\r\n                            })}\r\n                        </div>\r\n                        <div className={ClassNames.temp}>\r\n                            {(this.props.weatherData.main.temp - 273.15).toFixed(2)}°C\r\n                        </div>\r\n                        <div className={ClassNames.city}>\r\n                            {this.props.weatherData.name},{this.props.weatherData.sys.country}\r\n                        </div>\r\n\r\n                    </div>) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TemperatureModal;\r\n","import React, { Component } from 'react';\nimport ClassNames from './currentweatherdetails.module.css';\n\nclass CurrentWeatherDetails extends Component {\n\n  render() {\n    return (\n      <div className={ClassNames.body}>\n        \n        <div className={ClassNames.currentweatherdetails}>\n          <div className={ClassNames.topic}>Humidity</div>\n          <div className={ClassNames.lines} />\n          <div className={ClassNames.text}>\n            {this.props.CurrentweatherData.main.humidity} %\n          </div>\n        </div>\n\n\n        <div className={ClassNames.currentweatherdetails}>\n          <div className={ClassNames.topic}>Pressure</div>\n          <div className={ClassNames.lines} />\n          <div className={ClassNames.text}>\n            {this.props.CurrentweatherData.main.pressure} hPa\n          </div>\n        </div>\n\n        <div className={ClassNames.currentweatherdetails}>\n          <div className={ClassNames.topic}>Min Temperature</div>\n          <div className={ClassNames.lines} />\n          <div className={ClassNames.text}>\n            {(this.props.CurrentweatherData.main.temp_min - 273.15).toFixed(2)}°C\n          </div>\n        </div>\n        \n        <div className={ClassNames.currentweatherdetails}>\n          <div className={ClassNames.topic}>Max Temperature</div>\n          <div className={ClassNames.lines} />\n          <div className={ClassNames.text}>\n            {(this.props.CurrentweatherData.main.temp_max - 273.15).toFixed(2)}°C \n          </div>\n        </div>\n\n        <div className={ClassNames.currentweatherdetails}>\n          <div className={ClassNames.topic}>Wind Speed</div>\n          <div className={ClassNames.lines} />\n          <div className={ClassNames.text}>\n            {this.props.CurrentweatherData.wind.speed} m/sec\n          </div>\n        </div>\n\n        \n      </div >\n    );\n  }\n}\n\nexport default CurrentWeatherDetails;\n","import React, { Component } from 'react';\nimport ClassNames from './AppContainer.module.css';\nimport TemperatureModal from '../../components/temperatureModal/temperatureModal';\nimport axios from 'axios';\nimport CurrentWeatherDetails from '../../components/currentweatherdetails/currentweatherdetails';\nclass AppContainer extends Component {\n    state = {\n        latitude: null,\n        longitude: null,\n        API_KEY: `9ed5e07cc11f0ef0a18b03f79dde4029`,\n        weatherData: {\n            base: \"\",\n            clouds: {},\n            cod: null,\n            coord: {},\n            dt: null,\n            id: null,\n            main: {},\n            name: \"\",\n            sys: {},\n            visibility: null,\n            weather: [],\n            length: null,\n            wind: {}\n        },\n    }\n\n    componentDidMount() {\n        this.getlocation();\n    }\n\n    getlocation=()=>{\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                console.log(position.coords.latitude)\n                this.setState({ latitude: position.coords.latitude }, () => {\n                    this.setState({ longitude: position.coords.longitude }, () => {\n                        this.getWeather();\n                    });\n                })\n            });\n        }\n    }\n\n    getWeather = () => {\n        axios\n            .get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&APPID=${this.state.API_KEY}`)\n            .then(response => {\n                const weatherData = response.data;\n                console.log(weatherData);\n                this.setState({ weatherData: weatherData }, () => {\n                    console.log(this.state.weatherData)\n                });\n            })\n            .catch(error => {\n                console.log(error);\n                this.setState({ error: error });\n            });\n    }\n\n\n    render() {\n    return (\n      <div className={ClassNames.AppContainer}>\n\n        <TemperatureModal weatherData={this.state.weatherData}/>\n        <CurrentWeatherDetails CurrentweatherData={this.state.weatherData}/>\n\n      </div>\n    );\n  }\n}\n\nexport default AppContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppContainer from './containers/AppContainer/AppContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tempModal\":\"temperatureModal_tempModal__fja7a\",\"temp\":\"temperatureModal_temp__3HBas\",\"city\":\"temperatureModal_city__39b3F\",\"description\":\"temperatureModal_description__1wMy3\"};"],"sourceRoot":""}