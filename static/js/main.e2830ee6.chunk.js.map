{"version":3,"sources":["containers/AppContainer/AppContainer.module.css","components/currentweatherdetails/currentweatherdetails.module.css","components/temperatureModal/temperatureModal.js","components/currentweatherdetails/currentweatherdetails.js","containers/AppContainer/AppContainer.js","App.js","serviceWorker.js","index.js","components/temperatureModal/temperatureModal.module.css"],"names":["module","exports","AppContainer","currentweatherdetails","TemperatureModal","tempModal","React","createRef","description","icon","handleScroll","window","scrollY","_this","current","style","width","height","opacity","removeEventListener","this","addEventListener","react_default","a","createElement","props","weatherData","ref","className","ClassNames","color","build_default","size","animate","weather","map","content","charAt","toUpperCase","slice","temp","main","toFixed","city","name","sys","country","Component","CurrentWeatherDetails","CurrentweatherData","humidity","pressure","temp_max","temp_min","state","latitude","longitude","API_KEY","base","clouds","cod","coord","dt","id","visibility","length","wind","getlocation","navigator","geolocation","getCurrentPosition","position","console","log","coords","setState","getWeather","axios","get","concat","then","response","data","catch","error","temperatureModal","App","containers_AppContainer_AppContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2830ee6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppContainer\":\"AppContainer_AppContainer__2NJBC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentweatherdetails\":\"currentweatherdetails_currentweatherdetails__3fRHn\"};","import React, { Component } from 'react';\r\nimport ClassNames from './temperatureModal.module.css';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\nlet lastScrollY = 0;\r\n\r\nclass TemperatureModal extends Component {\r\n\r\n\r\n    componentWillMount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    tempModal = React.createRef();\r\n    description = React.createRef();\r\n    icon = React.createRef();\r\n\r\n    handleScroll = () => {\r\n        lastScrollY = window.scrollY;\r\n\r\n        if (lastScrollY > 50) {\r\n            this.tempModal.current.style.width = \"100px\";\r\n            this.tempModal.current.style.height = \"100px\";\r\n            this.description.current.style.opacity = \"0\";\r\n            this.icon.current.style.opacity = \"0\";\r\n        }\r\n        else {\r\n            this.tempModal.current.style.width = \"300px\";\r\n            this.tempModal.current.style.height = \"300px\";\r\n            this.description.current.style.opacity = \"1\";\r\n            this.icon.current.style.opacity = \"1\";\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.props.weatherData ? (\r\n                <div ref={this.tempModal} className={ClassNames.tempModal} style={{\r\n                    color:\"rgb(198, 102, 0)\"}}>\r\n                    <div ref={this.icon} className={ClassNames.description}>\r\n                        <ReactAnimatedWeather\r\n                            icon=\"CLOUDY\"\r\n                            color=\"rgb(198, 102, 0)\"\r\n                            size={64}\r\n                            animate={true}\r\n                        />\r\n                    </div>\r\n                    <div ref={this.description} className={ClassNames.description}>\r\n                        {this.props.weatherData.weather.map(content => {\r\n                            return (content.description.charAt(0).toUpperCase() + content.description.slice(1))\r\n                        })}\r\n                    </div>\r\n                    <div className={ClassNames.temp}>\r\n                        {(this.props.weatherData.main.temp - 273.15).toFixed(2)}Â°C\r\n                    </div>\r\n                    <div className={ClassNames.city}>\r\n                        {this.props.weatherData.name},{this.props.weatherData.sys.country}\r\n                    </div>\r\n\r\n                </div>) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TemperatureModal;\r\n","import React, { Component } from 'react';\nimport ClassNames from './currentweatherdetails.module.css';\n\nclass CurrentWeatherDetails extends Component {\n  \n    render() {\n    return (\n      <div className={ClassNames.currentweatherdetails}>\n\n      <div>{this.props.CurrentweatherData.humidity} %</div>\n      <div>{this.props.CurrentweatherData.pressure}  hPa</div>\n      <div>{this.props.CurrentweatherData.temp_max} </div>\n      <div>{this.props.CurrentweatherData.temp_min} </div>\n      {}\n      </div>\n    );\n  }\n}\n\nexport default CurrentWeatherDetails;\n","import React, { Component } from 'react';\nimport ClassNames from './AppContainer.module.css';\nimport TemperatureModal from '../../components/temperatureModal/temperatureModal';\nimport axios from 'axios';\nimport CurrentWeatherDetails from '../../components/currentweatherdetails/currentweatherdetails';\nclass AppContainer extends Component {\n    state = {\n        latitude: null,\n        longitude: null,\n        API_KEY: `9ed5e07cc11f0ef0a18b03f79dde4029`,\n        weatherData: {\n            base: \"\",\n            clouds: {},\n            cod: null,\n            coord: {},\n            dt: null,\n            id: null,\n            main: {},\n            name: \"\",\n            sys: {},\n            visibility: null,\n            weather: [],\n            length: null,\n            wind: {}\n        },\n    }\n\n    componentDidMount() {\n        this.getlocation();\n    }\n\n    getlocation=()=>{\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                console.log(position.coords.latitude)\n                this.setState({ latitude: position.coords.latitude }, () => {\n                    this.setState({ longitude: position.coords.longitude }, () => {\n                        this.getWeather();\n                    });\n                })\n            });\n        }\n    }\n\n    getWeather = () => {\n        axios\n            .get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&APPID=${this.state.API_KEY}`)\n            .then(response => {\n                const weatherData = response.data;\n                console.log(weatherData);\n                this.setState({ weatherData: weatherData }, () => {\n                    console.log(this.state.weatherData)\n                });\n            })\n            .catch(error => {\n                console.log(error);\n                this.setState({ error: error });\n            });\n    }\n\n\n    render() {\n    return (\n      <div className={ClassNames.AppContainer}>\n        header\n        <TemperatureModal weatherData={this.state.weatherData}/>\n        <CurrentWeatherDetails CurrentweatherData={this.state.weatherData.main}/>\n        footer\n      </div>\n    );\n  }\n}\n\nexport default AppContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppContainer from './containers/AppContainer/AppContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tempModal\":\"temperatureModal_tempModal__fja7a\",\"temp\":\"temperatureModal_temp__3HBas\",\"city\":\"temperatureModal_city__39b3F\",\"description\":\"temperatureModal_description__1wMy3\"};"],"sourceRoot":""}